name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags

permissions:
  contents: write # Ensure the token has write permissions to contents

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.14.x' # Specify the Node.js version you need

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build # Adjust according to your build script

      - name: Package the application
        run: npm run make # Assuming Electron Forge is configured to package the app
        # working-directory: path/to/electron-app # Adjust if your Electron app is in a subfolder

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4.3.3
        with:
          name: app-package
          path: out/make # Adjust to where Electron Forge outputs packages

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: app-package
          path: ./publish

      - name: List files in dist directory
        run: ls -l ./publish

      - name: Extract version
        id: extract_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Get Release ID
        id: get_release_id
        run: |
          release_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/${GITHUB_REF#refs/tags/} | jq -r .id)
          if [ "$release_id" == "null" ]; then
            echo "Release not found"
            exit 1
          fi
          echo "release_id=$release_id" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.release_id }}/assets?name=idleon-community-tool-win32-x64-${{ env.VERSION }}.zip
          asset_path: ./publish/zip/win32/x64/idleon-community-tool-win32-x64-${{ env.VERSION }}.zip # Adjust the path to your actual zip file
          asset_name: idleon-community-tool-win32-x64-${{ env.VERSION }}.zip # Name of the file to appear in the release
          asset_content_type: application/zip
